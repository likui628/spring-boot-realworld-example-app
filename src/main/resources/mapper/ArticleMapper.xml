<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.realworld.mapper.ArticleMapper">
    <sql id="profileColumns">
        U.id userId,
        U.username userUsername,
        U.bio userBio,
        U.image userImage
    </sql>
    <sql id="selectArticle">
        select
        A.id articleId,
        A.slug articleSlug,
        A.title articleTitle,
        A.description articleDescription,
        A.body articleBody,
        A.created_at articleCreatedAt,
        A.updated_at articleUpdatedAt,
        T.name tagName,
        <include refid="profileColumns"/>
        from
        articles A
        left join article_tags AT on A.id = AT.article_id
        left join tags T on T.id = AT.tag_id
        left join users U on U.id = A.user_id
    </sql>
    <sql id="selectComment">
        select
        C.id commentId,
        C.body commentBody,
        C.created_at commentCreatedAt,
        C.updated_at commentUpdatedAt,
        A.user_id userId,
        A.id articleId,
        <include refid="profileColumns"/>
        from
        comments C
        left join users U on C.user_id = U.id
        left join articles A on A.id = C.article_id
    </sql>

    <resultMap id="ProfileDto" type="com.example.realworld.domain.dto.ProfileDto">
        <id column="userId" property="id"/>
        <result column="userUsername" property="username"/>
        <result column="userBio" property="bio"/>
        <result column="userImage" property="image"/>
    </resultMap>
    <resultMap id="articleDto" type="com.example.realworld.domain.dto.ArticleDto">
        <id column="articleId" property="id"/>
        <result column="articleSlug" property="slug"/>
        <result column="articleTitle" property="title"/>
        <result column="articleDescription" property="description"/>
        <result column="articleBody" property="body"/>
        <result column="articleCreatedAt" property="createdAt"/>
        <result column="articleUpdatedAt" property="updatedAt"/>
        <association property="profileDto" resultMap="ProfileDto"/>
        <collection property="tagList" javaType="list" ofType="string">
            <result column="tagName"/>
        </collection>
    </resultMap>
    <resultMap id="commentDto" type="com.example.realworld.domain.dto.CommentDto">
        <id column="commentId" property="id"/>
        <result column="commentBody" property="body"/>
        <result column="userId" property="userId"/>
        <result column="articleId" property="articleId"/>
        <result column="commentCreatedAt" property="createdAt"/>
        <result column="commentUpdatedAt" property="updatedAt"/>
        <association property="profileDto" resultMap="ProfileDto"/>
    </resultMap>

    <insert id="insert">
        insert into articles(id, slug, title, description, body, user_id, created_at, updated_at)
        values (#{article.id},
                #{article.slug},
                #{article.title},
                #{article.description},
                #{article.body},
                #{article.userId},
                #{article.createdAt},
                #{article.updatedAt})
    </insert>

    <insert id="insertArticleTagRelation">
        insert into article_tags(article_id, tag_id)
        values (#{articleId}, #{tagId})
    </insert>

    <insert id="insertArticleUserRelation">
        insert into article_favorites(article_id, user_id)
        values (#{articleId}, #{userId})
    </insert>

    <insert id="removeArticleUserRelation">
        delete
        from article_favorites
        where user_id = #{userId}
          and article_id = #{articleId}

    </insert>

    <insert id="insertArticleComment">
        insert into comments(id, body, article_id, user_id, created_at, updated_at)
        values (#{comment.id},
                #{comment.body},
                #{comment.articleId},
                #{comment.userId},
                #{comment.createdAt},
                #{comment.updatedAt})
    </insert>

    <select id="isArticleFollowing" resultType="java.lang.Boolean">
        select count(1)
        from article_favorites
        where article_id = #{articleId}
          and user_id = #{userId}
    </select>

    <select id="articleFavoriteCount" resultType="java.lang.Integer">
        select count(1)
        from article_favorites
        where article_id = #{articleId}
    </select>

    <select id="findTag" resultType="com.example.realworld.domain.entity.TagEntity">
        select id, name
        from tags
        where name = #{name}
    </select>

    <select id="findBySlug" resultMap="articleDto">
        <include refid="selectArticle"/>
        where slug = #{slug}
    </select>

    <select id="queryArticles" resultMap="articleDto">
        <include refid="selectArticle"/>
        limit #{limit}
        offset #{offset}
    </select>

    <select id="findById" resultMap="articleDto">
        <include refid="selectArticle"/>
        where A.id = #{id}
    </select>
    <select id="findArticleCommentById" resultMap="commentDto">
        <include refid="selectComment"/>
        where C.id=#{commentId} and C.article_id=#{articleId}
    </select>

    <delete id="deleteArticleComment">
        delete
        from comments
        where id = #{commentId}
    </delete>
</mapper>