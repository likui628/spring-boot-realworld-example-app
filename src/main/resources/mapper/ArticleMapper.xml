<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.realworld.mapper.ArticleMapper">
    <sql id="profileColumns">
        U.id userId,
        U.username userUsername,
        U.bio userBio,
        U.image userImage
    </sql>
    <sql id="selectArticle">
        select
        A.id articleId,
        A.slug articleSlug,
        A.title articleTitle,
        A.description articleDescription,
        A.body articleBody,
        A.created_at articleCreatedAt,
        A.updated_at articleUpdatedAt,
        T.name tagName,
        <include refid="profileColumns"/>
        from
        articles A
        left join article_tags AT on A.id = AT.article_id
        left join tags T on T.id = AT.tag_id
        left join users U on U.id = A.user_id
    </sql>
    <sql id="selectArticleEntity">
        select A.id          articleId,
               A.slug        articleSlug,
               A.title       articleTitle,
               A.description articleDescription,
               A.body        articleBody,
               A.created_at  articleCreatedAt,
               A.updated_at  articleUpdatedAt,
               T.name        tagName
        from articles A
                 left join article_tags AT on A.id = AT.article_id
                 left join tags T on T.id = AT.tag_id
    </sql>
    <sql id="selectArticleIds">
        select distinct (A.id)
        from articles A
                 left join article_tags AT on A.id = AT.article_id
                 left join tags T on T.id = AT.tag_id
                 left join article_favorites AF on A.id = AF.article_id
                 left join users AU on AU.id = A.user_id
                 left join users AFU on AFU.id = AF.user_id
    </sql>

    <insert id="insert">
        insert into articles(id, slug, title, description, body, user_id, created_at, updated_at)
        values (#{article.id},
                #{article.slug},
                #{article.title},
                #{article.description},
                #{article.body},
                #{article.userId},
                #{article.createdAt},
                #{article.updatedAt})
    </insert>

    <update id="update">
        update articles
        <set>
            <if test="article.slug!=''">
                slug= #{article.slug},
            </if>
            <if test="article.title!=''">
                title= #{article.title},
            </if>
            <if test="article.body!=''">
                body=#{article.body},
            </if>
            updated_at=#{article.updatedAt}
        </set>
        where id = #{article.id}
    </update>

    <delete id="deleteArticle">
        delete
        from articles
        where id = #{id}
    </delete>

    <insert id="insertArticleTagRelation">
        insert into article_tags(article_id, tag_id)
        values (#{articleId}, #{tagId})
    </insert>

    <insert id="insertArticleUserRelation">
        insert into article_favorites(article_id, user_id)
        values (#{articleId}, #{userId})
    </insert>

    <insert id="removeArticleUserRelation">
        delete
        from article_favorites
        where user_id = #{userId}
          and article_id = #{articleId}

    </insert>

    <select id="isArticleFollowing" resultType="java.lang.Boolean">
        select count(1)
        from article_favorites
        where article_id = #{articleId}
          and user_id = #{userId}
    </select>

    <select id="articleFavoriteCount" resultType="java.lang.Integer">
        select count(1)
        from article_favorites
        where article_id = #{articleId}
    </select>

    <select id="findTag" resultType="com.example.realworld.domain.entity.TagEntity">
        select id, name
        from tags
        where name = #{name}
    </select>

    <select id="findBySlug" resultMap="transfer.data.articleEntity">
        <include refid="selectArticleEntity"/>
        where slug = #{slug}
    </select>

    <select id="findArticles" resultMap="transfer.data.articleDto">
        <include refid="selectArticle"/>
        <where>
            <foreach item="id" index="index" collection="articleIds"
                     open="A.id in (" separator="," close=")" nullable="true">
                #{id}
            </foreach>
        </where>
        order by A.created_at desc
    </select>

    <select id="findArticlesByAuthors" resultMap="transfer.data.articleDto">
        <include refid="selectArticle"/>
        <where>
            <foreach item="id" index="index" collection="userIds"
                     open="A.user_id in (" separator="," close=")" nullable="true">
                #{id}
            </foreach>
        </where>
        order by A.created_at desc
    </select>

    <select id="queryArticleIds" resultType="java.lang.String">
        <include refid="selectArticleIds"/>
        <where>
            <if test="tag != null">
                T.name=#{tag}
            </if>
            <if test="author != null">
                and AU.username=#{author}
            </if>
            <if test="favoritedBy != null">
                and AFU.username=#{favoritedBy}
            </if>
        </where>
        limit #{limit}
        offset #{offset}
    </select>

    <select id="findById" resultMap="transfer.data.articleDto">
        <include refid="selectArticle"/>
        where A.id = #{id}
    </select>

</mapper>